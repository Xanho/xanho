syntax = "proto3";

package org.xanho.proto.knowledgegraphactor;

import "scalapb/scalapb.proto";
import "org/xanho/proto/nlp/nlp.proto";
import "org/xanho/proto/akkaGrpcCompat.proto";

option (scalapb.options) = {
  single_file: true
  preamble: "sealed trait KnowledgeGraphCommand extends scalapb.GeneratedMessage"
  preamble: "sealed trait KnowledgeGraphEvent extends scalapb.GeneratedMessage"
  preamble: "sealed trait KnowledgeGraphResponse extends scalapb.GeneratedMessage"
};

// Commands

message IngestTextMessage {
  option (scalapb.message).extends = "org.xanho.proto.knowledgegraphactor.KnowledgeGraphCommand";

  ActorReference replyTo = 1;
  TextMessage textMessage = 2;
}

message GetState {
  option (scalapb.message).extends = "org.xanho.proto.knowledgegraphactor.KnowledgeGraphCommand";

  ActorReference replyTo = 1;
}

message GenerateMessage {
  option (scalapb.message).extends = "org.xanho.proto.knowledgegraphactor.KnowledgeGraphCommand";

  ActorReference replyTo = 1;
}

// Responses

message IngestTextResponse {
  option (scalapb.message).extends = "org.xanho.proto.knowledgegraphactor.KnowledgeGraphResponse";

  bool success = 1;
}

message GetStateResponse {
  option (scalapb.message).extends = "org.xanho.proto.knowledgegraphactor.KnowledgeGraphResponse";

  KnowledgeGraphState state = 1;
}

message GenerateMessageResponse {
  option (scalapb.message).extends = "org.xanho.proto.knowledgegraphactor.KnowledgeGraphResponse";

  TextMessage message = 1;
}

// Events

message TextMessageIngested {
  option (scalapb.message).extends = "org.xanho.proto.knowledgegraphactor.KnowledgeGraphEvent";

  TextMessage message = 1;
}

// State

message KnowledgeGraphState {
  string id = 1;
  repeated TextMessage messages = 2;
}

message TextMessage {
  string id = 1;
  MessageSource source = 2;
  int64 timestampMs = 3;
  string text = 4;
}

enum MessageSource {
  USER = 0;
  SYSTEM = 1;
}
